// Code generated by "stringer -type=Measurement"; DO NOT EDIT.

package meters

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Frequency-1]
	_ = x[Current-2]
	_ = x[CurrentL1-3]
	_ = x[CurrentL2-4]
	_ = x[CurrentL3-5]
	_ = x[CurrentN-6]
	_ = x[Voltage-7]
	_ = x[VoltageL1-8]
	_ = x[VoltageL2-9]
	_ = x[VoltageL3-10]
	_ = x[VoltageL1toL2-11]
	_ = x[VoltageL2toL3-12]
	_ = x[VoltageL3toL1-13]
	_ = x[VoltageLtoL-14]
	_ = x[Power-15]
	_ = x[PowerL1-16]
	_ = x[PowerL2-17]
	_ = x[PowerL3-18]
	_ = x[ImportPower-19]
	_ = x[ImportPowerL1-20]
	_ = x[ImportPowerL2-21]
	_ = x[ImportPowerL3-22]
	_ = x[ExportPower-23]
	_ = x[ExportPowerL1-24]
	_ = x[ExportPowerL2-25]
	_ = x[ExportPowerL3-26]
	_ = x[ReactivePower-27]
	_ = x[ReactivePowerL1-28]
	_ = x[ReactivePowerL2-29]
	_ = x[ReactivePowerL3-30]
	_ = x[ApparentPower-31]
	_ = x[ApparentPowerL1-32]
	_ = x[ApparentPowerL2-33]
	_ = x[ApparentPowerL3-34]
	_ = x[Cosphi-35]
	_ = x[CosphiL1-36]
	_ = x[CosphiL2-37]
	_ = x[CosphiL3-38]
	_ = x[THD-39]
	_ = x[THDL1-40]
	_ = x[THDL2-41]
	_ = x[THDL3-42]
	_ = x[THDCurrent-43]
	_ = x[THDL1Current-44]
	_ = x[THDL2Current-45]
	_ = x[THDL3Current-46]
	_ = x[Sum-47]
	_ = x[SumT1-48]
	_ = x[SumT2-49]
	_ = x[SumL1-50]
	_ = x[SumL2-51]
	_ = x[SumL3-52]
	_ = x[Import-53]
	_ = x[ImportT1-54]
	_ = x[ImportT2-55]
	_ = x[ImportL1-56]
	_ = x[ImportL2-57]
	_ = x[ImportL3-58]
	_ = x[Export-59]
	_ = x[ExportT1-60]
	_ = x[ExportT2-61]
	_ = x[ExportL1-62]
	_ = x[ExportL2-63]
	_ = x[ExportL3-64]
	_ = x[ReactiveSum-65]
	_ = x[ReactiveSumT1-66]
	_ = x[ReactiveSumT2-67]
	_ = x[ReactiveSumL1-68]
	_ = x[ReactiveSumL2-69]
	_ = x[ReactiveSumL3-70]
	_ = x[ReactiveImport-71]
	_ = x[ReactiveImportT1-72]
	_ = x[ReactiveImportT2-73]
	_ = x[ReactiveImportL1-74]
	_ = x[ReactiveImportL2-75]
	_ = x[ReactiveImportL3-76]
	_ = x[ReactiveExport-77]
	_ = x[ReactiveExportT1-78]
	_ = x[ReactiveExportT2-79]
	_ = x[ReactiveExportL1-80]
	_ = x[ReactiveExportL2-81]
	_ = x[ReactiveExportL3-82]
	_ = x[ApparentImport-83]
	_ = x[ApparentExport-84]
	_ = x[DCCurrent-85]
	_ = x[DCVoltage-86]
	_ = x[DCPower-87]
	_ = x[HeatSinkTemp-88]
	_ = x[DCCurrentS1-89]
	_ = x[DCVoltageS1-90]
	_ = x[DCPowerS1-91]
	_ = x[DCEnergyS1-92]
	_ = x[DCCurrentS2-93]
	_ = x[DCVoltageS2-94]
	_ = x[DCPowerS2-95]
	_ = x[DCEnergyS2-96]
	_ = x[DCCurrentS3-97]
	_ = x[DCVoltageS3-98]
	_ = x[DCPowerS3-99]
	_ = x[DCEnergyS3-100]
	_ = x[ChargeState-101]
	_ = x[BatteryVoltage-102]
	_ = x[PhaseAngle-103]
}

const _Measurement_name = "FrequencyCurrentCurrentL1CurrentL2CurrentL3CurrentNVoltageVoltageL1VoltageL2VoltageL3VoltageL1toL2VoltageL2toL3VoltageL3toL1VoltageLtoLPowerPowerL1PowerL2PowerL3ImportPowerImportPowerL1ImportPowerL2ImportPowerL3ExportPowerExportPowerL1ExportPowerL2ExportPowerL3ReactivePowerReactivePowerL1ReactivePowerL2ReactivePowerL3ApparentPowerApparentPowerL1ApparentPowerL2ApparentPowerL3CosphiCosphiL1CosphiL2CosphiL3THDTHDL1THDL2THDL3THDCurrentTHDL1CurrentTHDL2CurrentTHDL3CurrentSumSumT1SumT2SumL1SumL2SumL3ImportImportT1ImportT2ImportL1ImportL2ImportL3ExportExportT1ExportT2ExportL1ExportL2ExportL3ReactiveSumReactiveSumT1ReactiveSumT2ReactiveSumL1ReactiveSumL2ReactiveSumL3ReactiveImportReactiveImportT1ReactiveImportT2ReactiveImportL1ReactiveImportL2ReactiveImportL3ReactiveExportReactiveExportT1ReactiveExportT2ReactiveExportL1ReactiveExportL2ReactiveExportL3ApparentImportApparentExportDCCurrentDCVoltageDCPowerHeatSinkTempDCCurrentS1DCVoltageS1DCPowerS1DCEnergyS1DCCurrentS2DCVoltageS2DCPowerS2DCEnergyS2DCCurrentS3DCVoltageS3DCPowerS3DCEnergyS3ChargeStateBatteryVoltagePhaseAngle"

var _Measurement_index = [...]uint16{0, 9, 16, 25, 34, 43, 51, 58, 67, 76, 85, 98, 111, 124, 135, 140, 147, 154, 161, 172, 185, 198, 211, 222, 235, 248, 261, 274, 289, 304, 319, 332, 347, 362, 377, 383, 391, 399, 407, 410, 415, 420, 425, 435, 447, 459, 471, 474, 479, 484, 489, 494, 499, 505, 513, 521, 529, 537, 545, 551, 559, 567, 575, 583, 591, 602, 615, 628, 641, 654, 667, 681, 697, 713, 729, 745, 761, 775, 791, 807, 823, 839, 855, 869, 883, 892, 901, 908, 920, 931, 942, 951, 961, 972, 983, 992, 1002, 1013, 1024, 1033, 1043, 1054, 1068, 1078}

func (i Measurement) String() string {
	i -= 1
	if i < 0 || i >= Measurement(len(_Measurement_index)-1) {
		return "Measurement(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Measurement_name[_Measurement_index[i]:_Measurement_index[i+1]]
}
